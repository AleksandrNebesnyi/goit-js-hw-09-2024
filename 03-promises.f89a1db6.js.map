{"mappings":"YACA,IAAMA,EAAQC,SAASC,cAAc,SAmCrC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAS,SAACC,EAASC,GAC5B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,EACFF,EAAQ,CAACH,WAAUC,UAEnBG,EAAO,CAACJ,WAAUC,S,GAGnBA,E,IA5CWJ,SAASC,cAAc,yBAE/BW,iBAAiB,SAG3B,SAAuBC,GACrB,IAAIC,EAAW,GACfD,EAAME,iBACS,IAAIC,SAASjB,GAEnBkB,SAAQ,SAACC,EAAMC,GACtBL,EAAWK,GAAKD,C,IAapB,IAHI,IAAOE,EAAoBN,EAApBV,MAAMiB,EAAcP,EAAdO,KAAMC,EAAQR,EAARQ,OAGdC,EAAI,EAAGA,EAAID,EAAQC,GAAG,EAAG,CAEhCrB,EAAcqB,EAAE,EADKH,EAAQG,EAAIF,GACDG,MAAK,SAAAC,G,IAAEtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAChDsB,QAAQC,IAAI,uBAAwCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,IAAQyB,OAAM,SAAAJ,G,IAAEtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MACpFsB,QAAQC,IAAI,sBAAuCC,OAAfzB,EAAS,QAAYyB,OAANxB,EAAM,M,QAoB5DsB,QAAQC,IAAI,U","sources":["src/js/03-promises.js"],"sourcesContent":["\nconst formEl= document.querySelector('.form');\nconst submitBtn = document.querySelector('button[type=\"submit\"]');\n\nsubmitBtn.addEventListener('click', onPressSubmit);\n\n\nfunction onPressSubmit(event) {\n  let formValues={};\n  event.preventDefault();\n  const formData=new FormData(formEl);\n\n  formData.forEach((value,key) => {\n    formValues[key]=value\n  });\n\n\n  // const delay = parseInt(formData.get('delay'));\n  // const step = parseInt(formData.get('step'));\n  // const amount = parseInt(formData.get('amount'));\n\n  // for (let [name, value] of formData) {\n  //   formValues[name] = value};\n    const {delay,step, amount}=formValues;\n\n     \nfor (let i = 0; i < amount; i+=1) {\n  const currentDelay = delay + i * step;\n  createPromise(i+1,currentDelay).then(({position, delay})=>\n  {console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);}).catch(({position, delay})=>\n  {console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });  \n}  \n}\n\n\nfunction createPromise(position, delay) {\n  return new Promise ((resolve, reject)=>{\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay})\n      } else {\n        reject({position, delay})\n      }\n    \n    }, delay);\n\n  })  \n}\nconsole.log('promise');\n\n\n\n\n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });"],"names":["$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","formValues","preventDefault","FormData","forEach","value","key","delay1","step","amount","i","then","param","console","log","concat","catch"],"version":3,"file":"03-promises.f89a1db6.js.map"}